competitions <- fromJSON(file="D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\competitions.json")
library(tidyverse)
library(rjson)
library(parallel)
library(DT)
path <- "D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\"
# competitions <- fromJSON(file="C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\competitions.json")
competitions <- fromJSON(file=paste0(path,"competitions.json"))
competitions <- bind_rows(competitions)
datatable(competitions)
match.files <- list.files(path=file=paste0(path,"matches.json"),
match.files <- list.files(path=paste0(path,"matches.json"),
full.names = TRUE,recursive = TRUE)
match.files
paste0(path,"matches.json")
match.files <- list.files(path=paste0(path,"matches"),
full.names = TRUE,recursive = TRUE)
match.files
library(tidyverse)
library(rjson)
library(parallel)
library(DT)
library(tidyverse)
library(rjson)
library(parallel)
library(DT)
user = "erhan"
if(user = "erhan")
user = "erhan"
if(user == "erhan")
{path = "D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\"}
if(user == "ekrem")
{path = "C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\"}
# competitions <- fromJSON(file="C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\competitions.json")
competitions <- fromJSON(file=paste0(path,"competitions.json"))
competitions <- bind_rows(competitions)
datatable(competitions)
match.files <- list.files(path=paste0(path,"matches"),
full.names = TRUE,recursive = TRUE)
match.files
all.matches <- lapply(match.files, function(x){
match.temp <- fromJSON(file=x)
matches.df <- lapply(match.temp, function(y){
data.frame(t(unlist(y)), stringsAsFactors = FALSE)
})
bind_rows(matches.df)
}) %>% bind_rows()
rm(match.files)
datatable(all.matches)
all.matches %>%
group_by(competition.competition_name, season.season_name, home_team.home_team_gender) %>%
count() %>%
datatable()
numofmatches <- rbind(
all.matches %>% select(competition.competition_name, season.season_name,
home_team.home_team_name, home_team.home_team_gender) %>%
rename(competition = competition.competition_name, gender = home_team.home_team_gender,
team = home_team.home_team_name, season = season.season_name),
all.matches %>% select(competition.competition_name, season.season_name,
away_team.away_team_name, home_team.home_team_gender) %>%
rename(competition = competition.competition_name, gender = home_team.home_team_gender,
team = away_team.away_team_name, season = season.season_name)
) %>% group_by(competition, season, team, gender) %>%
count()
datatable(numofmatches)
library(tidyverse)
library(parallel)
library(rjson)
library(DT)
# Fransa HÄ±rvatistan
# final <- fromJSON(file="C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\events/8658.json")
user = "erhan"
if(user == "erhan")
{path = "D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\"}
if(user == "ekrem")
{path = "C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\"}
# Barcelona Deportivo
final <- fromJSON(file = paste0(path,"events/15946.json"))
event <- mclapply(final, function(y){
# --------------------------------------------
# Related Events
if(is.null(y$related_events)){related_events <- NA_character_}else{
related_events <- y$related_events
if(length(related_events)>1)
related_events <- paste(related_events,collapse = " , ")
}
# Tactics
if(is.null(y$tactics$formation)){formation <- NA_character_}else{formation <- y$tactics$formation}
# Event Type
if(is.null(y[[tolower(y$type$name)]]$type$name)){event.type <- NA_character_}else{event.type <- y[[tolower(y$type$name)]]$type$name}
# Body Part: Clearance, Goal Keeper, Pass, Shot
if(is.null(y[[tolower(y$type$name)]]$body_part$name)){body.part <- NA_character_}else{body.part <- y[[tolower(y$type$name)]]$body_part$name}
# Player & Position
if(is.null(y$player$name)){player <- NA_character_}else{player <- y$player$name}
if(is.null(y$position$name)){player.position <- NA_character_}else{player.position <- y$position$name}
# Location & End Location: Carry, Pass, Shot
if(is.null(y$location)){location <- NA_real_}else{location <- y$location}
if(is.null(y[[tolower(y$type$name)]]$end_location)){end_location <- NA_real_}else{end_location <- y[[tolower(y$type$name)]]$end_location}
# Duration
if(is.null(y$duration)){duration <- NA_real_}else{duration <- y$duration}
# Under Pressure
if(is.null(y$under_pressure)){under.pressure <- NA}else{under.pressure <- y$under_pressure}
# Out
if(is.null(y$out)){out <- NA}else{out <- y$out}
# Off Camera
if(is.null(y$off_camera)){off.camera <- NA}else{off.camera <- y$off_camera}
# Outcome: 50-50, Ball Receipt, Dribble, Duel, Goal Keeper, Interception, Pass, Shot, Substitution
if(is.null(y[[str_replace(str_replace(tolower(y$type$name)," ","_"),"-","_")]]$outcome$name)){outcome <- NA_character_}else{outcome <- y[[str_replace(tolower(y$type$name)," ","_")]]$outcome$name}
# Counterpress: 50-50, Block, Dribbled Past, Duel, Foul Committed, Pressure
if(is.null(y[[str_replace(str_replace(tolower(y$type$name)," ","_"),"-","_")]]$counterpress)){counterpress <- NA}else{counterpress <- y[[str_replace(tolower(y$type$name)," ","_")]]$counterpress}
# Foul Committed & Bad Behaviour: Card
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$card$name)){card <- NA_character_}else{card <- y[[str_replace(tolower(y$type$name)," ","_")]]$card$name}
# Offensive: Ball Recovery, Block, Foul Committed,
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$offensive)){offensive <- NA}else{offensive <- y[[str_replace(tolower(y$type$name)," ","_")]]$offensive}
# Recovery Failure
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$recovery_failure)){recovery.failure <- NA}else{recovery.failure <- y[[str_replace(tolower(y$type$name)," ","_")]]$recovery_failure}
# Deflection: Block
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$deflection)){deflection <- NA}else{deflection <- y[[str_replace(tolower(y$type$name)," ","_")]]$deflection}
# Save Block
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$save_block)){save.block <- NA}else{save.block <- y[[str_replace(tolower(y$type$name)," ","_")]]$save_block}
# Aerial Won: Clearance, Miscontrol, Shot
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$aerial_won)){aerial.won <- NA}else{aerial.won <- y[[str_replace(tolower(y$type$name)," ","_")]]$aerial_won}
# Overrun
if(is.null(y$dribble$overrun)){overrun <- NA}else{overrun <- y$dribble$overrun}
# Nutmeg
if(is.null(y$dribble$nutmeg)){nutmeg <- NA}else{nutmeg <- y$dribble$nutmeg}
# No Touch
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$no_touch)){no.touch <- NA}else{no.touch <- y[[str_replace(tolower(y$type$name)," ","_")]]$no_touch}
# Advantage: Foul Committed, Foul Won
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$advantage)){advantage <- NA}else{advantage <- y[[str_replace(tolower(y$type$name)," ","_")]]$advantage}
# Penalty: Foul Committed, Foul Won
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$penalty)){penalty <- NA}else{penalty <- y[[str_replace(tolower(y$type$name)," ","_")]]$penalty}
# Goal Keeper Position
if(is.null(y$goalkeeper$position$name)){gk.position <- NA_character_}else{gk.position <- y$goalkeeper$position$name}
# Goal Keeper Type
if(is.null(y$goalkeeper$type$name)){gk.type <- NA_character_}else{gk.type <- y$goalkeeper$type$name}
# Technique: Goal Keeper, Pass, Shot
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$technique$name)){technique <- NA_character_}else{technique <- y[[str_replace(tolower(y$type$name)," ","_")]]$technique$name}
# Half End Match Suspended
if(is.null(y$half_end$match_suspended)){half.end.match.suspended <- NA}else{half.end.match.suspended <- y$half_end$match_suspended}
# Injury Stoppage: In Chain
if(is.null(y$injury_stoppage$in_chain)){injury.stoppage.in.chain <- NA}else{injury.stoppage.in.chain <- y$injury_stoppage$in_chain}
# Pass
if(is.null(y$pass$recipient$name)){pass.recipient <- NA_character_}else{pass.recipient <- y$pass$recipient$name}
if(is.null(y$pass$length)){pass.length <- NA_real_}else{pass.length <- y$pass$length}
if(is.null(y$pass$angle)){pass.angle <- NA_real_}else{pass.angle <- y$pass$angle}
if(is.null(y$pass$height$name)){pass.height <- NA_character_}else{pass.height <- y$pass$height$name}
if(is.null(y$pass$assisted_shot_id)){assisted.shot.id <- NA_character_}else{assisted.shot.id <- y$pass$assisted_shot_id}
if(is.null(y$pass$backheel)){backheel <- NA}else{backheel <- y$pass$backheel}
if(is.null(y$pass$miscommunication)){miscommunication <- NA}else{miscommunication <- y$pass$miscommunication}
if(is.null(y$pass$cross)){cross <- NA}else{cross <- y$pass$cross}
if(is.null(y$pass$cut_back)){cut.back <- NA}else{cut.back <- y$pass$cut_back}
if(is.null(y$pass$switch)){switch <- NA}else{switch <- y$pass$switch}
if(is.null(y$pass$shot_assist)){shot.assist <- NA}else{shot.assist <- y$pass$shot_assist}
if(is.null(y$pass$goal_assist)){goal.assist <- NA}else{goal.assist <- y$pass$goal_assist}
# Deflected: Pass, Shot
if(is.null(y[[str_replace(tolower(y$type$name)," ","_")]]$deflected)){deflected <- NA}else{deflected <- y[[str_replace(tolower(y$type$name)," ","_")]]$deflected}
# Player Off
if(is.null(y$player_off$permanent)){player.off.permanent <- NA}else{player.off.permanent <- y$player_off$permanent}
# Shot
if(is.null(y$shot$goal_assist)){shot.key.pass.id <- NA_character_}else{shot.key.pass.id <- y$shot$key_pass_id}
if(is.null(y$shot$follows_dribble)){follows.dribble <- NA}else{follows.dribble <- y$shot$follows_dribble}
if(is.null(y$shot$first_time)){first.time <- NA}else{first.time <- y$shot$first_time}
if(is.null(y$shot$open_goal)){open.goal <- NA}else{open.goal <- y$shot$open_goal}
if(is.null(y$shot$statsbomb_xg)){xg <- NA_real_}else{xg <- y$shot$statsbomb_xg}
# Substitution
if(is.null(y$substitution$replacement$name)){substitution <- NA_character_}else{substitution <- y$substitution$replacement$name}
# --------------------------------------------
data.frame(
id = y$id,
related_events = related_events,
index = y$index,
period = y$period,
timestamp = y$timestamp,
minute = y$minute,
second = y$second,
possession.team = y$possession_team$name,
team = y$team$name,
team.formation = formation,
player = player,
player.position = player.position,
event = y$type$name,
play.pattern = y$play_pattern$name,
possession = y$possession,
event.type = event.type,
x.location = location[1],
y.location = location[2],
x.end.location = end_location[1],
y.end.location = end_location[2],
z.end.location = end_location[3],
duration = duration,
pass.recipient = pass.recipient,
pass.length = pass.length,
pass.angle = pass.angle,
pass.height = pass.height,
assisted.shot.id = assisted.shot.id,
backheel = backheel,
deflected = deflected,
miscommunication = miscommunication,
cross = cross,
cut.back = cut.back,
switch = switch,
shot.assist = shot.assist,
goal.assist = goal.assist,
technique = technique,
body.part = body.part,
outcome = outcome,
shot.key.pass.id = shot.key.pass.id,
follows.dribble = follows.dribble,
first.time = first.time,
open.goal = open.goal,
xg = xg,
under.pressure = under.pressure,
counterpress = counterpress,
card = card,
offensive = offensive,
recovery.failure = recovery.failure,
deflection = deflection,
save.block = save.block,
aerial.won = aerial.won,
overrun = overrun,
nutmeg = nutmeg,
no.touch = no.touch,
advantage = advantage,
penalty = penalty,
gk.position = gk.position,
gk.type = gk.type,
injury.stoppage.in.chain,
player.off.permanent = player.off.permanent,
substitution = substitution,
out = out,
off.camera = off.camera,
half.end.match.suspended = half.end.match.suspended,
stringsAsFactors = FALSE
)
}) %>% bind_rows() %>%
# TakÄ±mlarÄ±n Taktiksel DeÄŸiÅŸiklikler
group_by(team) %>%
fill(team.formation) %>% fill(team.formation, .direction = 'up')
library(plyr)
library(tidyverse)
library(magrittr)
library(parallel)
library(rjson)
library(DT)
library(DataExplorer)
user = "erhan"
if(user == "erhan")
{path = "D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\"}
if(user == "ekrem")
{path = "C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\"}
competitions <- fromJSON(file=paste0(path,"competitions.json"))
competitions <- bind_rows(competitions)
competitions %>% filter(competition_name == "FA Women's Super League")
match.files <- list.files(path=paste0(path,"matches"),
full.names = TRUE,recursive = TRUE)
match.files
all.matches <- mclapply(match.files, function(x){
match.temp <- fromJSON(file=x)
matches.df <- mclapply(match.temp, function(y){
data.frame(t(unlist(y)), stringsAsFactors = FALSE)
})
bind_rows(matches.df)
}) %>% bind_rows()
datatable(all.matches)
all.matches2 <- mclapply(match.files, function(x){
temp <- fromJSON(file=x)
temp <- mclapply(temp, function(y){ unlist(y)})
rbind.fill(mclapply(temp, function(z) do.call("data.frame", as.list(z))))
})%>% bind_rows()
datatable(all.matches2)
missing <- DataExplorer::plot_missing(all.matches)
all.matches.clean <- all.matches[,missing$data %>% filter(num_missing == 0) %>%
pull(feature) %>% as.vector()]
all.matches.clean %<>% mutate_at(vars(c("match_week", "home_score", "away_score")), funs(as.integer))
datatable(all.matches.clean)
wsl.1819 <- all.matches.clean %>%
filter(competition.competition_id == 37,
season.season_id == 4) %>%
arrange(match_week)
wsl.1819 %>% head
wdl <- wsl.1819 %>%
select(home_team.home_team_name, away_team.away_team_name,
home_score, away_score) %>%
mutate(match = row_number()) %>%
gather(HomeAway, Team, - home_score, -away_score, - match)
library(plyr)
library(tidyverse)
library(magrittr)
library(parallel)
library(rjson)
library(DT)
library(DataExplorer)
user = "erhan"
if(user == "erhan")
{path = "D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\"}
if(user == "ekrem")
{path = "C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\"}
competitions <- fromJSON(file=paste0(path,"competitions.json"))
competitions <- bind_rows(competitions)
competitions %>% filter(competition_name == "FA Women's Super League")
match.files <- list.files(path=paste0(path,"matches"),
full.names = TRUE,recursive = TRUE)
match.files
all.matches <- mclapply(match.files, function(x){
match.temp <- fromJSON(file=x)
matches.df <- mclapply(match.temp, function(y){
data.frame(t(unlist(y)), stringsAsFactors = FALSE)
})
bind_rows(matches.df)
}) %>% bind_rows()
datatable(all.matches)
all.matches2 <- mclapply(match.files, function(x){
temp <- fromJSON(file=x)
temp <- mclapply(temp, function(y){ unlist(y)})
rbind.fill(mclapply(temp, function(z) do.call("data.frame", as.list(z))))
})%>% bind_rows()
datatable(all.matches2)
missing <- DataExplorer::plot_missing(all.matches)
all.matches.clean <- all.matches[,missing$data %>% filter(num_missing == 0) %>%
pull(feature) %>% as.vector()]
all.matches.clean %<>% mutate_at(vars(c("match_week", "home_score", "away_score")), funs(as.integer))
datatable(all.matches.clean)
wsl.1819 <- all.matches.clean %>%
filter(competition.competition_id == 37,
season.season_id == 4) %>%
arrange(match_week)
wsl.1819 %>% head
wdl <- wsl.1819 %>%
select(home_team.home_team_name, away_team.away_team_name,
home_score, away_score) %>%
mutate(match = row_number()) %>%
gather(HomeAway, Team, - home_score, -away_score, - match)
View(wsl.1819)
wsl.1819 %>%
select(home_team.home_team_name, away_team.away_team_name,
home_score, away_score)
View(wsl.1819)
ROW_N
row_number()
wdl <- wsl.1819 %>%
select(home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>%
mutate(match = row_number()) %>%
gather(HomeAway, Team, - home_score, -away_score, - match)
View(wsl.1819)
wdl
wsl.1819
wsl.1819 %>% select(home_team.home_team_name, away_team.away_team_name, home_score, away_score)
wsl.1819 %>% select(home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>% mutate(match = row_number())
wsl.1819 %>% select(home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>% mutate(match = row_number(match_id))
wsl.1819 %>% select(home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>% mutate(match = row_number(x))
wsl.1819 %>% select(home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>% mutate(match = row_number(.))
wsl.1819 %>% select(home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>% mutate(match = row_number())
x <- c(5, 1, 3, 2, 2, NA)
row_number(x)
wdl <- wsl.1819 %>%
select(match_id,home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>%
mutate(match = row_number(match_id))
wdl
wdl <- wsl.1819 %>%
select(match_id,home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>%
mutate(match = row_number(match_id)) %>%
gather(HomeAway, Team, - home_score, -away_score, - match)
wdl %<>%
arrange(match) %>%
mutate(GD = home_score-away_score,
Team.GD = ifelse(HomeAway ==  "home_team.home_team_name", GD, -1*GD),
Result = ifelse(Team.GD > 0,"W",
if_else(Team.GD == 0,"D","L"))) %>%
arrange(Team, match) %>%
left_join(wdl %>% select(match, HomeAway, Team) %>% spread(HomeAway, Team), by = "match") %>%
select(match, Team, home_team.home_team_name, away_team.away_team_name, home_score, away_score, GD,  Team.GD, Result) %>%
group_by(Team) %>%
mutate(match = row_number()) %>%
ungroup()
wdl <- wsl.1819 %>%
select(match_id,home_team.home_team_name, away_team.away_team_name, home_score, away_score) %>%
mutate(match = row_number(match_id)) %>%
gather(HomeAway, Team, - home_score, -away_score, - match)
wdl %<>%
arrange(match) %>%
mutate(GD = home_score-away_score,
Team.GD = ifelse(HomeAway ==  "home_team.home_team_name", GD, -1*GD),
Result = ifelse(Team.GD > 0,"W",
if_else(Team.GD == 0,"D","L"))) %>%
arrange(Team, match) %>%
left_join(wdl %>% select(match, HomeAway, Team) %>% spread(HomeAway, Team), by = "match") %>%
select(match, Team, home_team.home_team_name, away_team.away_team_name, home_score, away_score, GD,  Team.GD, Result) %>%
group_by(Team) %>%
mutate(match = row_number(match)) %>%
ungroup()
View(wdl)
event.files <- list.files(path=paste0(path,"\\events"),
full.names = TRUE,recursive = TRUE)
library(plyr)
library(tidyverse)
library(magrittr)
library(parallel)
library(rjson)
source(file = "Functions/Pitch for Statsbomb.R")
user = "erhan"
if(user == "erhan")
{path = "D:\\Akademik Çalışmalar\\Spor Bilimi\\Futbol\\Statsbomb\\data\\"}
if(user == "ekrem")
{path = "C:\\Users\\dell\\Desktop\\FoT\\open-data-master\\data\\"}
match.files <- list.files(path=paste0(path,"matches"),
full.names = TRUE,recursive = TRUE)
match.id <- mclapply(match.files, function(x){
match.temp <- fromJSON(file=x)
matches.df <- mclapply(match.temp, function(y){
data.frame(t(unlist(y)), stringsAsFactors = FALSE)
})
bind_rows(matches.df)
}) %>% bind_rows() %>%
filter(competition.competition_id == 37,
season.season_id == 4) %>%
arrange(match_week) %>%
pull(match_id)
rm(match.files)
event.files <- list.files(path=paste0(path,"events"),
full.names = TRUE,recursive = TRUE)
wsl.1819.index <- which(unlist(str_extract_all(event.files, "\\(?[0-9]+\\)?")) %in% match.id)
rm(match.id)
wsl.1819.index
full.pass.df <- mclapply(event.files[wsl.1819.index], function(x){
match_id <- data.frame(match_id = as.numeric(str_extract_all(x, "\\(?[0-9]+\\)?")[[1]]))
temp <- fromJSON(file=x)
pass.index <- which(sapply(temp,function(i) i$type$name)=="Pass")
event <- mclapply(temp[pass.index], function(y){
if(is.null(y$pass$end_location)){end_location <- NA_real_}else{end_location <- y$pass$end_location}
if(is.null(y$pass$recipient$name)){receiver <- NA_character_}else{receiver <- y$pass$recipient$name}
if(is.null(y$pass$length)){pass_length <- NA_real_}else{pass_length <- y$pass$length}
if(is.null(y$pass$angle)){pass_angle <- NA_real_}else{pass_angle <- y$pass$angle}
if(is.null(y$pass$body_part$name)){body_part <- NA_character_}else{body_part <- y$pass$body_part$name}
data.frame(
Possession.Team = y$possession_team$name,
Possession = y$possession,
Passer = y$player$name,
X.Pass = y$location[1],
Y.Pass = y$location[2],
Pass.Type = y$pass$height$name,
Receiver = receiver,
X.Receive = end_location[1],
Y.Receive = end_location[2],
Pass.Length = pass_length,
Pass.Angle = pass_angle,
Body.Part = body_part,
stringsAsFactors = FALSE
)
}) %>% bind_rows()
cbind(match_id, event)
}) %>% bind_rows()
# Cleaning
full.pass.df2 <- full.pass.df %>%
filter(Y.Receive <= 80) %>% #cleaning the data
mutate(Y.Pass = 80 - Y.Pass, #changing the axis so that origin starts at the lower left corner
Y.Receive = 80 - Y.Receive)
cl <- full.pass.df2 %>% select("Possession.Team","X.Pass","Y.Pass","X.Receive","Y.Receive")
#perform k-means on the dataset (removing the 1st column because we just need to use the last 4 columns in our analysis)
mc = mclapply(c(25,50,75), function(x,centers) kmeans(x, centers, iter.max=1000), x=cl[,-1])
cl$Cluster.25 <- mc[[1]]$cluster #created clusters using 25 clusters
cl$Cluster.50 <- mc[[2]]$cluster #created clusters using 50 clusters
cl$Cluster.75 <- mc[[3]]$cluster #created clusters using 75 clusters
cluster.50.summary <- cl %>%
group_by(Cluster.50) %>%
summarise(X.Pass = mean(X.Pass),Y.Pass = mean(Y.Pass),
X.Receive = mean(X.Receive), Y.Receive = mean(Y.Receive),
count = n()) #obtain for each cluster id, the average location of the pass
